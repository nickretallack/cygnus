ButtonSubmit = (function(){

  var ButtonSubmit = function(element){

    var self = this;

    self.form = element;
    self.area = element.nextAll(".button-area").first();
    self.attachmentArea = self.form.siblings().find("."+self.form.attr("attachment"));
    self.icons = JSON.parse('<%= CONFIG[:button_icons].to_json %>');

  };

  Make.extend(ButtonSubmit.prototype, {

    initialize: function(){
      var self = this;
      $.each(self.icons, function(name, icon){
        var button = self.form.find("#" + name);
        if(!button.exists()) return;
        if(button.attr("area")) self.area = self.form.nextAll(".button-area").eq(parseInt(button.attr("area")));
        var size = /small|medium-small|medium|large/.exec(button.attr("class"));
        size = size === null? "medium-small" : size.first();
        switch(name){
          case "attach":
            if(self.attachmentArea.find("#new_image").exists()) self.attachmentArea.hide();
            break;
        }
        var div, icon;
        self.area.append((div = $("<div />", {
          css: {
            float: "left",
            cursor: "pointer"
          }
        })).append(
          (icon = $("<i />", {
            class: "material-icons " + size,
            id: button.attr("value"),
            text: icon,
            title: name.readable()
          })),
          $("<label />", {
            text: button.attr("value"),
            css: {
              display: "block"
            }
          })
        ).on("click.ButtonSubmit", function(event){
          pause(event);
          if(name === "delete" && button.is("[confirm]")){
            if(confirm(button.attr("confirm"))){
              icon.replaceWithSpinner();
              button.trigger("click");
            }
          }else{
            switch(name){
              case "back":
                window.location.replace(self.form.attr("action"));
                break;
              case "edit":
                $(".editable").hide();
                $(".editing").show();
                break;
              case "attach":
                self.attachmentArea.show();
                break;
              case "preview_comment":
              case "preview_pm":
                var comment = self.form.children("textarea"),
                    area = self.form.children("blockquote"),
                    parentHidable = self.form.parents(".hidable");
                area.html(markdown.toHTML(comment.prop("value").replace(/\[.+?\]\((.+?)\)/gi, function(match, p1){
                  if(p1.contains("http://")){
                    return match;
                  }else{
                    return match.replace(p1, "http://" + p1);
                  }
                })));
                area.show();
                if(parentHidable.exists()) bleatr.where(function(element){
                  return element["container"] !== undefined && element.container["container"] !== undefined && element.container.container.get(0) == parentHidable.get(0);
                }).first().container.maximize(false);
                break;
              default:
                icon.replaceWithSpinner();
                button.trigger("click");
                break;
            }
          }
        }));
        if(name === "default"){
          icon.css({
            transform: "scaleY(-1)"
          });
        }else if (name === "back"){
          icon.css({
            transform: "scaleX(-1)"
          });
        }
        button.hide();
      });
      if(self.area.is("[class *= centered]")){
        self.area.children().css({
          width: (100 / self.area.children().length)+"%"
        });
      }
    }

  });

  return ButtonSubmit;

})();