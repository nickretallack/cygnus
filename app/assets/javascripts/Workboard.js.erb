Workboard = (function(){

  var Workboard = function(element){

    var self = this;

    self.topCard = element;
    self.modeRegex = /view|edit|reorder/;
    self.lists = {};
    self.cards = {};
    self.triggers = {};
    self.divs = {};

    self.topCard.find("a").filter(function(index, element){
      return self.modeRegex.test($(element).attr("name"));
    }).each(function(index, element){
      self.triggers[$(element).attr("name")] = $(element);
    });
    $.each(self.triggers, function(key, value){
      value.on("click.Workboard", function(){
        self.switchMode(key);
      });
    });

  };

  Make.extend(Workboard.prototype, {

    initialize: function(){
      var self = this;
      $.each(self.triggers.keys(), function(index, key){
        self.divs[key] = self.topCard.find("div."+key+"-mode");
      });
      self.topCard.find(".card-list").each(function(index, element){
        self.lists[$(element).attr("id")] = $(element);
      });
      $.each(self.lists.values(), function(index, element){
        self.cards[$(element).attr("id")] = $(element).find(".card-card");
      });
      self.switchMode(self.triggers.values().where(function(element){
        return element.is("[start]");
      }).first().attr("name"));
    },

    switchMode: function(mode){
      var self = this;
      mode = self.modeRegex.exec(mode);
      if(mode === null || self[mode[0]] === undefined) return;
      $.each(self.divs.values(), function(index, value){
        value.hide();
      });
      $(".card.new").hide();
      self.topCard.find(".card").off();
      self.divs[mode[0]].show();
      self[mode[0]]();
    },

    view: function(){
      var self = this;
    },

    edit: function(){
      var self = this;
      $(".card.new").show();
    },

    reorder: function(){
      var self = this;
      self.topCard.find(".card").on("mouseenter", function(){
        hover = $(this);
        hover.find("h4", "h5").css({
          cursor: "default"
        })
        $(this).css("outline", "4px dashed slategrey");
        $(this).on("mousedown", function(event){
          held = $(this);
          var title = held.find("#title");
          pause(event);
          $("<div />", {
            class: "card thing"
          }).css({
            backgroundColor: held.css("background-color"),
            color: title.css("color")
          }).append($("<"+title.prop("tagName")+" />", {
            text: title.html()
          })).appendTo($(document.body));
          $(".thing").css({
            position: "absolute",
            top: event.pageY,
            left: event.pageX,
            pointerEvents: "none",
            padding: "10px"
          });
          $(".thing").css({
            marginLeft: $(".thing").outerWidth()/-2,
            marginTop: $(".thing").outerHeight()/-4
          });
          $(window).on("mousemove", function(event){
            if(typeof scrollTimer !== "undefined") clearInterval(scrollTimer);
            y = event.pageY;
            if(event.pageY-$(window).scrollTop() > $(window).height()*.8){
              scrollTimer = setInterval(function(){
                if(y < $("footer").offset().top && $(window).scrollTop() < $(window).height() - 5){
                  $(window).scrollTop($(window).scrollTop()+3);
                  y += 3;
                  $(".thing").css({
                    top: y
                  });
                }
              }, 5);
            }else if(event.pageY-$(window).scrollTop() < $("header").height()*2){
              scrollTimer = setInterval(function(){
                if($(window).scrollTop() > 5){
                  $(window).scrollTop($(window).scrollTop()-3);
                  y -= 3;
                  $(".thing").css({
                    top: y
                  });
                }
              }, 5);
            }
            $(".thing").css({
              top: event.pageY,
              left: event.pageX
            });
          });
        });
      }).on("mouseleave", function(){
        $(this).css("outline", "none");
      });

      $(window).on("mouseup", function(event){
        if($(event.target).prop("tagName") === "INPUT") return;
        $(window).off("mousemove");
        $(".thing").remove();
        if(typeof hover !== "undefined") hover.css("outline", "none");
        if(typeof held !== "undefined"){
          if($(held.parents(".card")[0]).hasClass("list")){
            if(hover.hasClass("list")){
              held.appendTo($(hover.find(".card-title")[0]));
            }else{
              if(held.prevAll(".card").toArray().contains(hover[0])){
                held.insertBefore(hover);
              }else{
                held.insertAfter(hover);
              }
            }
          }else if(hover.hasClass("list")){
            if(held.prevAll(".card").toArray().contains(hover[0])){
              held.insertBefore(hover);
            }else{
              held.insertAfter(hover);
            }
          }
        }
        self.generateOrderField();
      });
    },

    generateOrderField(){
      var self = this,
          lists = $(".list");
      $("#card_order").attr("value",
      ("{"+$(".top-card").attr("id").stringify()+":["+[].fill(lists.length, function(index){
          return lists.length > 0? lists[index].id.stringify() : "";
        }).join(", ")+"]").replace(/'/g, "\"")+
      (function(){
        var append = "";
        $.each(lists, function(index, list){
          list = $(list);
          var cards = list.find(".card");
          append += (", "+list.attr("id").stringify()+":["+[].fill(cards.length, function(index){
              return cards.length > 0? cards[index].id.stringify() : "";
            }).join(", ")+"]").replace(/'/g, "\"");
        });
        return append+"}";
      })());
        }
  });

  return Workboard;

})();