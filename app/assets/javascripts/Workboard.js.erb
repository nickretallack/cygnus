Workboard = (function(){

  var Workboard = function(element){

    var self = this;

    self.topCard = element;
    self.modeRegex = /view|edit|reorder/;
    self.triggers = {};
    self.divs = {};
    self.lists = self.topCard.find(".list-card:not(.new)");
    self.form = self.topCard.find(".reorder-mode").find("form");
    self.submit = self.form.children("[type = submit]");

    self.topCard.find("a").filter(function(index, element){
      return self.modeRegex.test($(element).attr("name"));
    }).each(function(index, element){
      self.triggers[$(element).attr("name")] = $(element);
    });
    $.each(self.triggers, function(key, value){
      value.on("click.Workboard", function(){
        self.switchMode(key);
      });
    });

  };

  Make.extend(Workboard.prototype, {

    initialize: function(){
      var self = this;
      $.each(self.triggers.keys(), function(index, key){
        self.divs[key] = self.topCard.find("div."+key+"-mode");
      });
      self.switchMode(self.triggers.values().where(function(element){
        return element.is("[start]");
      }).first().attr("name"));
      self.submit.on("click.Workboard", function(event){
        pause(event);
        self.orderField();
        $(this).trigger("click.ButtonSubmit");
      });
    },

    switchMode: function(mode){
      var self = this;
      mode = self.modeRegex.exec(mode);
      if(mode === null || self[mode[0]] === undefined) return;
      $.each(self.divs.values(), function(index, value){
        value.hide();
      });
      $(".card.new").hide();
      self.lists.off("*.Workboard");
      self.divs[mode[0]].show();
      self.topCard.removeClass("move");
      self[mode[0]]();
    },

    view: function(){
      var self = this;
    },

    edit: function(){
      var self = this;
      $(".card.new").show();
    },

    reorder: function(){
      var self = this,
          affected;
      self.topCard.addClass("move");
      self.lists.on("mousedown.Workboard", function(event){
        var card = $(event.target).closest(".card");
        affected = card.is(".list-card")? self.topCard.find(".list-card:not(.new)") : self.topCard.find(".card:not(.new)");
        affected.on("mouseenter.Workboard", function(event){
          var target = $(event.target).closest(".card");
          if(!affected.contains(target)) return;
          if(target.index() < card.index()){
            card.insertBefore(target);
          }else if(target.index() > card.index()){
            card.insertAfter(target);
          }
          if(card.is(".card-card") && target.is(".list-card")){
            card.appendTo(target.find("#cards"));
          }
        });
      }).on("mouseup.Workboard", function(){
        affected.off("mouseenter.Workboard");
      });
    },

    orderField: function(){
      var self = this;
      $.each(self.topCard.find(".list-card:not(.new)").toArray().map(function(element){
        element = $(element);
        var object = {};
        object[element.attr("id")] = element.find(".card-card:not(.new)").toArray().map(function(element){
          return $(element).attr("id");
        });
        return object;
      }), function(index, element){
        self.form.append($("<input />", {
          class: "order",
          type: "hidden",
          name: "card[order]["+self.form.find(".order").length+"]",
          value: JSON.stringify(element)
        }));
      });
    }

  });

  return Workboard;

})();