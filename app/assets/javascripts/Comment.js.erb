Comment = (function(){

  var Comment = function(element){

    var self = this;

    self.comment = element;
    self.imageArea = self.comment.find(".image").parent();
    self.author = self.comment.find("h5").text();
    self.content = self.comment.find("blockquote");
    self.buttonArea = element.find(".button-area");
    self.buttonIcons = JSON.parse('<%= CONFIG[:comment_icons].to_json %>');

    self.fill();

  };

  Make.extend(Comment.prototype, {

    fill: function(){
      var self = this;
      self.buttonArea.html("");
      $.each(self.buttonIcons, function(name, icon){
        self.buttonArea.append(self.makeButton(name, icon).on("click.Comment", function(){
          if(typeof self[name.camelCase()] === "function") self[name.camelCase()]($(this));
        }));
      });
    },

    makeButton: function(name, icon){
      var button = $("<i />", {
                    class: "material-icons medium-small",
                    text: icon,
                    title: name.readable()
                  }),
            label = $("<label />", {
                      text: name.readable(),
                      css: {
                        display: "block"
                      }
                    }),
            div = $("<div />", {
                    css: {
                      float: "left",
                      width: "100px"
                    }
                  });
        div.append(button, label);
        return div;
    },

    indent: function(){
      var self = this;
      return self.indentOf(self.comment);
    },

    indentOf: function(comment){
      var self = this;
      return parseInt(/indent-(\d+)/.exec(comment.attr("class"))[1]);
    },

    setIndent: function(level){
      var self = this;
      self.comment.removeClass(/indent-\d+/.exec(self.comment.attr("class"))[0]).addClass("indent-" + level);
    },

    reply: function(div){
      var self = this,
          button = div.children("i"),
          newArea = self.comment.next(".new");
      if(newArea.exists()){
        newArea.show();
        newArea.returnAreaFromSpinner();
        var textarea = newArea.find("textarea");
        textarea.prop("value", "");
      }else{
        button.replaceWithSpinner();
        if(/submission\/(\d+)/.test(window.location.pathname)){
          $.ajax({
            url: "/reply",
            data: {
              submission: RegExp.$1,
              reply: self.comment.attr("id"),
              indent: self.indent()
            },
            success: function(data){
              self.comment.after(data);
              self.buttonArea.returnAreaFromSpinner()
              initialize();
            }
          });
        }
      }
    },

    conversation: function(){
      var self = this;
      return self.comment.nextUntil(self.comment.nextAll().filter(function(index, element){
        return self.indentOf($(element)) <= self.indentOf(self.comment);
      }));
    },

    minimize: function(div){
      var self = this,
          conversation = self.conversation(),
          extraneousElements = self.imageArea.add(self.content).add(self.buttonArea.children());
      extraneousElements.hide();
      conversation.hide();
      div.replaceWith(self.makeButton("maximize_conversation", '<%= CONFIG[:other_icons][:maximize] %>').one("click.Comment", function(){
        $(this).replaceWith(div);
        extraneousElements.show();
        conversation.show();
        self.fill();
      }));
    },

    quote: function(div){
      var self = this,
          button = div.children("i"),
          newArea = self.comment.next(".new");
      if(!newArea.exists()){
        button.replaceWithSpinner();
        if(/submission\/(\d+)/.test(window.location.pathname)){
          $.ajax({
            url: "/reply",
            data: {
              submission: RegExp.$1,
              reply: self.comment.attr("id"),
              indent: /indent-(\d+)/.exec(self.comment.attr("class"))[1]
            },
            success: function(data){
              data = $(data);
              var textarea = data.find("textarea");
              textarea.prop("value", ">" + self.content.text());
              textarea.putCursorAtEnd();
              self.comment.after(data);
              self.buttonArea.returnAreaFromSpinner();
              initialize();
            }
          });
        }
      }else{
        newArea.show();
        newArea.returnAreaFromSpinner();
        var textarea = newArea.find("textarea");
        textarea.prop("value", ">" + self.content.text());
        textarea.putCursorAtEnd();
      }
    },

    pmAuthor: function(div){
      var self = this;
      window.open("/" + $("#current-user").text() + "/conversations/reply/" + self.author, "_blank");
    },

    placeNew: function(comment){
      
    }

  })

  return Comment;

})();