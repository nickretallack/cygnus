AddableField = (function(){

  var AddableField = function(element){

    var self = this;

    self.field = element;
    self.area = element.nextAll(".addable-area").eq(0);
    self.addable = self.field.children().last();
    self.orderable = self.field.is(".orderable");
    self.addButton = $("<i />", {
      class: "material-icons medium-small add",
      text: "<%= CONFIG[:button_icons][:add] %>"
    });
    self.removeButton = $("<i />", {
      class: "material-icons medium-small",
      text: "<%= CONFIG[:button_icons][:remove] %>"
    });

    self.addButton.on("click.AddableField", function(){
      self.add();
    });

    if(self.orderable && self.addable.is("li")){
      self.field.children("li").each(function(index, li){
        self.initializeHandle($(li));
      });
    }

    self.area.append(self.addButton);

    self.field.children().each(function(index, item){
      self.initializeRemove($(item));
    });

    $(window).on("resize.AddableField", function(){
      self.area.children().css({
        height: self.addable.outerHeight(true)
      });
    });

  };

  Make.extend(AddableField.prototype, {

    initialize: function(){
      var self = this;
      if(self.addable.is("li")){
        self.initializeHandle(self.field.children().last());
      }
      $(window).trigger("resize");
    },

    initializeHandle: function(li){
      var self = this;
      li.children(".handle").off("mousedown.AddableField").on("mousedown.AddableField", function(){
        self.reorder(li);
      });
    },

    initializeRemove: function(item){
      var self = this;
      self.addButton.before(self.removeButton.clone().on("click.AddableField", function(){
        self.remove(item);
        var nameArray = self.addable.attr("name").toArray();
        self.field.children().each(function(index, element){
          element = $(element);
          nameArray[nameArray.length - 1] = 0 + index;
          element.attr("name", nameArray.parse());
          element.attr("id", nameArray.join("_"));
        });
      }));
    },

    add: function(){
      var self = this,
          addable = self.addable.clone(),
          last = self.field.children().last();

      if(last.is("select")){
        addable.children("option").removeAttr("selected");
      }else{
        addable.prop("value", "");
      }
      
      var nameArray = last.attr("name").toArray();
      nameArray[nameArray.length - 1] = parseInt(nameArray.last()) + 1;
      self.addable = addable;
      self.field.append(addable);
      addable.attr("name", nameArray.parse());
      addable.attr("id", nameArray.join("_"));
      self.initialize();
      self.initializeRemove(addable);
    },

    remove: function(item){
      var self = this,
          buttons = self.area.children(":not(.add)");
      buttons.eq(item.index()).remove();
      item.remove();
    },

    reorder: function(li){
      var self = this,
          ol = li.closest("ol");
      li.css({
        backgroundColor: "antiquewhite"
      });
      ol.find("*").addClass("no-select");
      ol.one("mousemove.AddableField", function(){
        ol.children().on("mouseenter.AddableField", function(event){
          var target = $(event.target),
              buttons = self.area.children(":not(.add)");
          target = target.is("li")? target : target.closest("li");
          if(target.index() < li.index()){
            buttons.eq(li.index()).insertBefore(buttons.eq(target.index()))
            li.insertBefore(target);
          }else if(target.index() > li.index()){
            buttons.eq(li.index()).insertAfter(buttons.eq(target.index()))
            li.insertAfter(target);
          }
        });
      });
      $(window).one("mouseup.AddableField", function(event){
        li.css({
          backgroundColor: "inherit"
        });
        ol.find("*").removeClass("no-select");
        ol.off("mousemove.AddableField");
        ol.children().off("mouseenter.AddableField");
      });
    }

  });

  return AddableField;

})();