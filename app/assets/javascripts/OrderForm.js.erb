OrderForm = (function(){

  var OrderForm = function(element){

    var self = this;

    self.div = element;
    self.form = $("#"+self.div.attr("form"));
    self.submit = self.form.children("[type = submit]");
    self.contentField = self.form.children("[name = 'order_form[content]']");
    self.workspace = element.find("#workspace");
    self.buttonArea = self.div.find("#button-area");
    self.icons = JSON.parse('<%= CONFIG[:order_form_icons].to_json %>');
    self.buttons = {};
    self.templates = {};

    $.each(self.icons, function(name, icon){
      self.buttons[name.camelCase()] = $("<button />", {
        class: "btn button-with-icon",
        text: name.readable()
      }).prepend($("<i />", {
        class: "material-icons",
        text: icon
      }));
      self.templates[name.camelCase()] = $($("#" + name + "-template").html());
    });

    $.each(self.buttons, function(key, value){
      self.buttonArea.append(value);
      value.on("click.OrderForm", function(){
        self.add(key);
      });
    });

  };

  Make.extend(OrderForm.prototype, {

    initialize: function(){
      var self = this;
      self.workspace.find(".question").children(".remove").on("click.OrderForm", function(){
        self.remove($(this).parents("li"));
      });
      self.form.find(".question").remove();
      self.workspace.children("li").each(function(index, li){
        self.initializeHandle($(li));
      });
      self.submit.one("click.OrderForm", function(event){
        pause(event);
        self.generateContentFieldValue();
        $(this).trigger("click");
      });
    },

    initializeHandle: function(li){
      var self = this;
      li.children().children(".handle").on("mousedown.OrderForm", function(){
        self.reorder(li);
      });
    },

    add: function(name){
      var self = this, li;
      self.workspace.append((li = self.templates[name].clone()));
      li.children().children(".remove").on("click.OrderForm", function(){
        self.remove(li);
      });
      var addableField = li.find(".addable-field");
      if(addableField.exists()){
        addableField = new AddableField(addableField);
        bleatr.push(addableField);
        addableField.initialize();
      }
      self.initializeHandle(li);
    },

    remove: function(target){
      var self = this;
      target.remove();
    },

    reorder: function(li){
      var self = this,
          ol = li.closest("ol");
      ol.find("*").addClass("no-select");
      ol.one("mousemove.OrderForm", function(){
        ol.children().on("mouseenter.OrderForm", function(event){
          var target = $(event.target);
          target = target.is("li")? target : target.closest("li");
          if(target.index() < li.index()){
            li.insertBefore(target);
          }else if(target.index() > li.index()){
            li.insertAfter(target);
          }
        });
      });
      $(window).one("mouseup.OrderForm", function(event){
        ol.find("*").removeClass("no-select");
        ol.off("mousemove.OrderForm");
        ol.children().off("mouseenter.OrderForm");
      });
    },

    generateContentFieldValue: function(){
      var self = this;
      self.form.children("input.question").remove();
      $.each(self.workspace.find(".question").toArray().map(function(element){
        element = $(element);
        var object = {};
        object[element.attr("name")] =  element.children(".content").find("input, textarea").toArray().map(function(element){
                                          element = $(element);
                                          return {
                                            name: element.attr("name"),
                                            value: element.prop("value")
                                          }
                                        });
        return object;
      }), function(index, element){
        self.form.append($("<input />", {
          class: "question",
          type: "hidden",
          name: "order_form[content]["+self.form.children(".question").length+"]",
          value: JSON.stringify(element)
        }));
      });
    }

  });

  return OrderForm;

})();